class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        vector<int> adj[301];
      for(int i=0;i<n;i++)
      {
          for(int j=0;j<n;j++)
          {
              if(i==j){continue;}
              if(graph[i][j])
                {
                  adj[i].push_back(j);
                  //adj[j].push_back(i);
                }
          }
      }
        sort(initial.begin(),initial.end());
        int out = n+1,res=-1;;
        set<int> s;
        for(auto e:initial){
            s.insert(e);
        }
        // vector<int> in(graph.size());
        // for(int i=0;i<graph.size();i++){
        //     int c=0;
        //     for(int j=0;j<graph.size();j++){
        //         if(graph[i][j] && s.count(j)){
        //             c++;
        //         }
        //     }
        //     in[i]=c-1;
        // }
        for(auto e:initial){
            // queue<int> q;
            // q.push(e);
            vector<int> vis(graph.size());
            // cout<<e<<" ";
            // while(q.size()){
            //     int c = q.front();
            //     cout<<c<<" ";
            //     q.pop();
            //     vis[c]=1;
            //     for(int i=0;i<graph.size();i++){
            //         if(graph[e][i] && !vis[i] && !(s.count(i)) && !in[i]){
            //             q.push(i);
            //         }
            //     }
            // }            
            int cu = 0;
            // cout<<" f ";
            // for(int i=0;i<vis.size();i++){
            //     int f=vis[i];
            //     if(f && i!=e ){cout<<i<<" ";cu++;}
            // }
            // cout<<" a "<<cu<<" "<<out<<endl;
            // if(cu && cu>out){
            //     out=cu;
            //     res=e;
            // }
            set<int> q =s;
            q.erase(e);
            while(q.size()){
                int j=*q.begin();
                q.erase(j);
                if(vis[j]){continue;}
                vis[j]=1;
                cu++;
                for(auto f:adj[j]){
                    if(!vis[f]){
                        q.insert(f);
                    }
                }
            }
            if(cu==out){
                res=min(res,e);
            }
            if(cu<out){
                out=cu;
                res=e;
            }
        }
        // cout<<out<<:"";
        if(out==INT_MIN){
            // cout<<"a"<<endl;
            for(auto e:initial){
                int c=0;
                for(int i=0;i<graph.size();i++){
                    if(graph[e][i]){
                        c++;
                    }
                }
                if(c==1){
                    return e;
                }
            }
        }
        return res;
    }
};